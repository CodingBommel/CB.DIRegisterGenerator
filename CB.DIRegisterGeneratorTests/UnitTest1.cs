using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Moq;
using NUnit.Framework;
using CB.DIRegisterGenerator;

namespace Tests;

public class DIRegisterGeneratorTests
{
    [SetUp]
    public void Setup()
    {
    }

    [Test]
    public void Test()
    {
        string source = @"namespace MySpace
    {
        public class MyClass : IMyClass
        {

        }
        
        public interface IMyClass
        {

        }
    }

    namespace MySpace3
    {
        public class MyClass2 : IMyClass2
        {

        }
    }

    namespace MySpace2
    {       
        public interface IMyClass2
        {

        }
    }";
        var syntaxTree = CSharpSyntaxTree.ParseText(source, path: "MyClass.cs", encoding: Encoding.UTF8);
        var compilation = CSharpCompilation.Create("TestFiles", new[] { syntaxTree });

        var generator = new DIRegisterGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var runedDriver = driver.RunGenerators(compilation);
        
        var expectedSource = @"/* generated by Analizer.DynamicFileGenerator */
using Microsoft.Extensions.DependencyInjection;
using MySpace;
using MySpace2;
using MySpace3;

namespace Analizer
{
    public static class DependencyInjection
    {
        public static void AddClasses(this IServiceCollection services)
        {
            services.AddTransient<IMyClass, MyClass>();
            services.AddTransient<IMyClass2, MyClass2>();
        }
    }
}";
        VerifyGeneratorDriverHelper.Verify(runedDriver, expectedSource);
    }

    [Test]
    public void TestIgnoreAttribute()
    {
        string source = @"namespace MySpace
    {
        public class MyClass : IMyClass
        {

        }
        
        public interface IMyClass
        {

        }
    }

    namespace MySpace2
    {
        public class MyClass2 : IMyClass2
        {

        }

        [IgnoreDynalmicGenerated]       
        public interface IMyClass2
        {

        }
    }";
        var syntaxTree = CSharpSyntaxTree.ParseText(source, path: "MyClass.cs", encoding: Encoding.UTF8);
        var compilation = CSharpCompilation.Create("TestFiles", new[] { syntaxTree });

        var generator = new DIRegisterGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var runedDriver = driver.RunGenerators(compilation);
        
        var expectedSource = @"/* generated by Analizer.DynamicFileGenerator */
using Microsoft.Extensions.DependencyInjection;
using MySpace;

namespace Analizer
{
    public static class DependencyInjection
    {
        public static void AddClasses(this IServiceCollection services)
        {
            services.AddTransient<IMyClass, MyClass>();
        }
    }
}";
        VerifyGeneratorDriverHelper.Verify(runedDriver, expectedSource);
    }
}